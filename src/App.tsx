import { useCallback, useState } from 'react';
import { useAppState, useCalculations } from './hooks';
import { MarketplaceSelector, DataInputForm, ScenarioManager } from './components/forms';
import { ResultsPanel } from './components/results';
import { Button } from './components/ui';
import GlossaryModal from './components/ui/GlossaryModal';
import Layout from './components/layout/Layout';
import type { MarketplaceId, TaxRegime } from './types';

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockMarketplaces = [
  {
    id: 'wildberries' as MarketplaceId,
    name: 'Wildberries',
    config: {
      defaultCommission: 17,
      logisticOptions: [],
      specificFields: [],
      taxRegimes: ['USN_6', 'USN_15', 'OSNO'] as TaxRegime[],
    },
    defaultValues: {
      commission: 17,
      pickupRate: 70,
      returnRate: 15,
      logistics: 0,
      purchasePrice: 0,
      deliveryToWarehouse: 0,
      packaging: 0,
      otherCOGS: 0,
      storage: 0,
      returnProcessing: 0,
      advertising: 0,
      otherVariableCosts: 0,
      fixedCostsPerMonth: 0,
      expectedSalesPerMonth: 100,
      taxRegime: 'USN_6' as TaxRegime,
      retailPrice: 1000,
      sellerDiscount: 0,
      additionalPromo: 0,
    }
  },
  {
    id: 'ozon' as MarketplaceId,
    name: 'Ozon', 
    config: {
      defaultCommission: 15,
      logisticOptions: [],
      specificFields: [],
      taxRegimes: ['USN_6', 'USN_15', 'OSNO'] as TaxRegime[],
    },
    defaultValues: {
      commission: 15,
      pickupRate: 65,
      returnRate: 20,
      logistics: 35,
      purchasePrice: 0,
      deliveryToWarehouse: 0,
      packaging: 0,
      otherCOGS: 0,
      storage: 0,
      returnProcessing: 0,
      advertising: 0,
      otherVariableCosts: 0,
      fixedCostsPerMonth: 0,
      expectedSalesPerMonth: 100,
      taxRegime: 'USN_6' as TaxRegime,
      retailPrice: 1000,
      sellerDiscount: 0,
      additionalPromo: 0,
    }
  }
];

function App() {
  const [isGlossaryOpen, setIsGlossaryOpen] = useState(false);
  
  const {
    selectedMarketplace,
    currentScenario,
    scenarios,
    input,
    results,
    errors,
    isCalculating,
    setMarketplace,
    updateInput,
    setResults,
    setErrors,
    setCalculating,
    saveScenario,
    loadScenario,
    deleteScenario,
    newScenario
  } = useAppState();
  
  const handleMarketplaceChange = useCallback((marketplaceId: MarketplaceId) => {
    setMarketplace(marketplaceId);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    const marketplace = mockMarketplaces.find(mp => mp.id === marketplaceId);
    if (marketplace) {
      updateInput(marketplace.defaultValues);
    }
  }, [setMarketplace, updateInput]);

  const handleInputChange = useCallback((field: string, value: number | string) => {
    updateInput({ [field]: value });
  }, [updateInput]);

  const handleBulkChange = useCallback((values: Partial<any>) => {
    updateInput(values);
  }, [updateInput]);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
  useCalculations({
    input,
    onResults: setResults,
    onErrors: setErrors,
    onCalculating: setCalculating,
    debounceMs: 800 // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—Ä–µ–º—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ
  });

  // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
  const currentMarketplace = mockMarketplaces.find(mp => mp.id === selectedMarketplace);
  
  return (
    <Layout>
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/50 relative overflow-hidden">
        {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ–Ω–∞ */}
        <div className="absolute inset-0 overflow-hidden pointer-events-none">
          {/* –ö—Ä—É–≥–∏ */}
          <div className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-blue-400/10 to-indigo-400/10 rounded-full blur-3xl"></div>
          <div className="absolute top-1/2 -left-32 w-64 h-64 bg-gradient-to-br from-purple-400/10 to-pink-400/10 rounded-full blur-3xl"></div>
          <div className="absolute bottom-0 right-1/4 w-96 h-96 bg-gradient-to-br from-cyan-400/10 to-blue-400/10 rounded-full blur-3xl"></div>
          
          {/* –°–µ—Ç–∫–∞ */}
          <div className="absolute inset-0 bg-[linear-gradient(rgba(59,130,246,0.03)_1px,transparent_1px),linear-gradient(90deg,rgba(59,130,246,0.03)_1px,transparent_1px)] bg-[size:20px_20px]"></div>
        </div>
        
        <div className="relative z-10 py-6 md:py-12">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="space-y-6 md:space-y-10">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              <div className="text-center mb-8 md:mb-12">
                {/* –ò–∫–æ–Ω–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
                <div className="inline-flex items-center justify-center w-16 h-16 md:w-20 md:h-20 bg-gradient-to-br from-blue-500 via-purple-500 to-indigo-600 rounded-3xl mb-6 shadow-lg shadow-blue-500/25 hover:shadow-xl hover:shadow-blue-500/30 transition-all duration-300 hover:scale-105">
                  <svg className="w-8 h-8 md:w-10 md:h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                  </svg>
                </div>
                
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–æ–π */}
                <h1 className="text-3xl md:text-5xl lg:text-6xl font-bold bg-gradient-to-r from-slate-900 via-blue-900 to-indigo-900 bg-clip-text text-transparent mb-4 leading-tight">
                  –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏
                </h1>
                
                {/* –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <p className="text-lg md:text-xl text-slate-600 max-w-3xl mx-auto px-4 mb-6 leading-relaxed">
                  –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ <span className="font-semibold text-blue-600">Wildberries</span> –∏ <span className="font-semibold text-orange-600">Ozon</span> —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∫–æ–º–∏—Å—Å–∏–π –∏ —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
                </p>
                
                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <div className="flex flex-wrap justify-center gap-6 mb-8">
                  <div className="flex items-center space-x-2 text-sm text-slate-500">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>100% —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤</span>
                  </div>
                  <div className="flex items-center space-x-2 text-sm text-slate-500">
                    <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                    <span>2 –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞</span>
                  </div>
                  <div className="flex items-center space-x-2 text-sm text-slate-500">
                    <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                    <span>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                  </div>
                </div>
                
                {/* –ö–Ω–æ–ø–∫–∞ –≥–ª–æ—Å—Å–∞—Ä–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º */}
                <div className="flex justify-center">
                  <Button 
                    variant="outline" 
                    onClick={() => setIsGlossaryOpen(true)}
                    className="group flex items-center space-x-3 px-6 py-3 text-blue-600 border-blue-200 hover:border-blue-300 hover:bg-blue-50/50 transition-all duration-200 hover:shadow-md rounded-xl"
                  >
                    <svg className="w-5 h-5 group-hover:scale-110 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                    </svg>
                    <span className="font-medium">üìö –ì–ª–æ—Å—Å–∞—Ä–∏–π —Ç–µ—Ä–º–∏–Ω–æ–≤</span>
                  </Button>
                </div>
              </div>

              {/* –°–µ–ª–µ–∫—Ç–æ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ */}
              <MarketplaceSelector
                marketplaces={mockMarketplaces}
                selectedMarketplace={selectedMarketplace}
                onMarketplaceChange={handleMarketplaceChange}
                errors={errors}
              />

              {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ */}
              {selectedMarketplace && (
                <ScenarioManager
                  scenarios={scenarios}
                  currentScenarioId={currentScenario}
                  marketplace={selectedMarketplace}
                  currentInput={input}
                  currentResults={results}
                  onScenarioLoad={loadScenario}
                  onScenarioSave={saveScenario}
                  onScenarioDelete={deleteScenario}
                  onNewScenario={newScenario}
                />
              )}

              {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–æ–π */}
              <div className="grid grid-cols-1 xl:grid-cols-2 gap-6 md:gap-8 lg:gap-10">
                {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö */}
                {selectedMarketplace && (
                  <div className="order-2 xl:order-1">
                    <div className="bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl shadow-slate-200/50 border border-white/20 p-6 md:p-8">
                      <DataInputForm
                        marketplace={selectedMarketplace}
                        values={input}
                        onChange={handleInputChange}
                        onBulkChange={handleBulkChange}
                        errors={errors}
                      />
                    </div>
                  </div>
                )}

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤ - –ª–∏–ø–∫–∏–π –±–ª–æ–∫ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ */}
                {selectedMarketplace && (
                  <div className="order-1 xl:order-2">
                    <div className="xl:sticky xl:top-8 xl:max-h-[calc(100vh-4rem)] xl:overflow-y-auto">
                      <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl shadow-slate-200/50 border border-white/20 overflow-hidden">
                        <ResultsPanel
                          marketplace={currentMarketplace || null}
                          results={results}
                          isCalculating={isCalculating}
                          onExport={() => console.log('–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel')}
                          onSave={() => console.log('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π')}
                          onReset={() => console.log('–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')}
                        />
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* –ì–ª–æ—Å—Å–∞—Ä–∏–π –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      <GlossaryModal 
        isOpen={isGlossaryOpen} 
        onClose={() => setIsGlossaryOpen(false)} 
      />
    </Layout>
  );
}

export default App;