import React, { useState } from 'react';
import { Button, Card } from '../ui';
import { useAutoFill } from '../../hooks';
import type { CalculationInput, MarketplaceId } from '../../types';

interface AutoFillHelperProps {
  marketplace: MarketplaceId;
  currentInput: CalculationInput;
  onApply: (values: Partial<CalculationInput>) => void;
  className?: string;
}

const AutoFillHelper: React.FC<AutoFillHelperProps> = ({
  marketplace,
  currentInput,
  onApply,
  className = ''
}) => {
  const [selectedCategory, setSelectedCategory] = useState<'low_price' | 'mid_price' | 'high_price'>('mid_price');
  const [isExpanded, setIsExpanded] = useState(false);

  const { suggestions, applySuggestions, categories } = useAutoFill({
    marketplace,
    priceCategory: selectedCategory,
    currentInput
  });

  const handleApply = () => {
    const values = applySuggestions();
    onApply(values);
    setIsExpanded(false);
  };

  const handleApplyCategory = () => {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const values = applySuggestions();
    const filteredValues: Partial<CalculationInput> = {};
    
    Object.entries(values).forEach(([key, value]) => {
      const currentValue = currentInput[key as keyof CalculationInput];
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0
      if (currentValue === 0 || currentValue === '' || currentValue === undefined || currentValue === null) {
        filteredValues[key as keyof CalculationInput] = value as any;
      }
    });
    
    onApply(filteredValues);
  };

  const selectedCategoryInfo = categories.find(cat => cat.key === selectedCategory);

  if (!isExpanded) {
    return (
      <div className={`mb-6 ${className}`}>
        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <div>
                <h3 className="text-sm font-medium text-blue-900">–ë—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ</h3>
                <p className="text-xs text-blue-700">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</p>
              </div>
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsExpanded(true)}
              className="border-blue-300 text-blue-700 hover:bg-blue-50"
            >
              –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`mb-6 ${className}`}>
      <Card title="üöÄ –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ" subtitle="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏">
        <div className="space-y-4">
          {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞
            </label>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value as 'low_price' | 'mid_price' | 'high_price')}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              {categories.map((category) => (
                <option key={category.key} value={category.key}>
                  {category.name} ({category.priceRange}) - {category.description}
                </option>
              ))}
            </select>
          </div>

          {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–Ω–∞—á–µ–Ω–∏–π */}
          {selectedCategoryInfo && (
            <div className="bg-gray-50 rounded-lg p-4">
              <h4 className="text-sm font-medium text-gray-900 mb-3">
                –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è "{selectedCategoryInfo.name}"
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 text-xs">
                <div className="space-y-1">
                  <div className="font-medium text-gray-700">–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</div>
                  <div>–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {suggestions.purchasePrice?.toLocaleString('ru-RU')} ‚ÇΩ</div>
                  <div>–î–æ—Å—Ç–∞–≤–∫–∞: {suggestions.deliveryToWarehouse?.toLocaleString('ru-RU')} ‚ÇΩ</div>
                  <div>–£–ø–∞–∫–æ–≤–∫–∞: {suggestions.packaging?.toLocaleString('ru-RU')} ‚ÇΩ</div>
                </div>
                <div className="space-y-1">
                  <div className="font-medium text-gray-700">–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:</div>
                  <div>–õ–æ–≥–∏—Å—Ç–∏–∫–∞: {suggestions.logistics?.toLocaleString('ru-RU')} ‚ÇΩ</div>
                  <div>–•—Ä–∞–Ω–µ–Ω–∏–µ: {suggestions.storage?.toLocaleString('ru-RU')} ‚ÇΩ</div>
                  <div>–í–æ–∑–≤—Ä–∞—Ç—ã: {suggestions.returnProcessing?.toLocaleString('ru-RU')} ‚ÇΩ</div>
                </div>
                <div className="space-y-1">
                  <div className="font-medium text-gray-700">–¶–µ–Ω—ã –∏ —Ä–µ–∫–ª–∞–º–∞:</div>
                  <div>–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞: {suggestions.retailPrice?.toLocaleString('ru-RU')} ‚ÇΩ</div>
                  <div>–†–µ–∫–ª–∞–º–∞: {suggestions.advertising?.toLocaleString('ru-RU')} ‚ÇΩ</div>
                  <div>–ü—Ä–æ–¥–∞–∂–∏/–º–µ—Å: {suggestions.expectedSalesPerMonth} —à—Ç</div>
                </div>
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex flex-wrap gap-3 pt-2">
            <Button
              variant="primary"
              onClick={handleApply}
              className="flex items-center space-x-2"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              <span>–ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è</span>
            </Button>
            
            <Button
              variant="secondary"
              onClick={handleApplyCategory}
              className="flex items-center space-x-2"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
              </svg>
              <span>–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ</span>
            </Button>
            
            <Button
              variant="ghost"
              onClick={() => setIsExpanded(false)}
              className="flex items-center space-x-2"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
              <span>–°–∫—Ä—ã—Ç—å</span>
            </Button>
          </div>

          {/* –ü–æ–º–æ—â—å */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
            <div className="flex items-start space-x-2">
              <svg className="w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <div className="text-xs text-blue-700">
                <p className="font-medium mb-1">–°–æ–≤–µ—Ç:</p>
                <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ", —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —É–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ. 
                   –ó–Ω–∞—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö –¥–ª—è {marketplace === 'wildberries' ? 'Wildberries' : 'Ozon'}.</p>
              </div>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default AutoFillHelper;
