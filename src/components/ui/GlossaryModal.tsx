import React, { useState, useEffect } from 'react';
import { Button } from './';

interface GlossaryTerm {
  term: string;
  definition: string;
  formula?: string;
  example?: string;
  category: 'cogs' | 'marketplace' | 'metrics' | 'pricing' | 'general';
}

const GLOSSARY_TERMS: GlossaryTerm[] = [
  // COGS
  {
    term: '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (COGS)',
    definition: '–ü—Ä—è–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
    formula: 'COGS = –ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞ + –î–æ—Å—Ç–∞–≤–∫–∞ + –£–ø–∞–∫–æ–≤–∫–∞ + –ü—Ä–æ—á–∏–µ',
    example: '500‚ÇΩ + 50‚ÇΩ + 25‚ÇΩ + 25‚ÇΩ = 600‚ÇΩ',
    category: 'cogs'
  },
  {
    term: '–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞',
    definition: '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –Ω–∞–ª–æ–≥–æ–≤',
    example: '–ï—Å–ª–∏ –ø–æ–∫—É–ø–∞–µ—Ç–µ —Ç–æ–≤–∞—Ä –∑–∞ 500‚ÇΩ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
    category: 'cogs'
  },
  
  // –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
  {
    term: '–ö–æ–º–∏—Å—Å–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞',
    definition: '–ü—Ä–æ—Ü–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä–µ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Å –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏',
    example: 'WB: 17%, Ozon: 15% (–≤ —Å—Ä–µ–¥–Ω–µ–º)',
    category: 'marketplace'
  },
  {
    term: '–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞',
    definition: '–î–æ–ª—è –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∫—É–ø–∞—é—Ç',
    example: '–ü—Ä–∏ 70% –≤—ã–∫—É–ø–µ –∏–∑ 100 –∑–∞–∫–∞–∑–æ–≤ –≤—ã–∫—É–ø—è—Ç —Ç–æ–ª—å–∫–æ 70',
    category: 'marketplace'
  },
  {
    term: '–õ–æ–≥–∏—Å—Ç–∏–∫–∞',
    definition: '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –¥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è',
    example: 'WB: –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, Ozon: 35-150‚ÇΩ',
    category: 'marketplace'
  },
  
  // –ú–µ—Ç—Ä–∏–∫–∏
  {
    term: 'CM1 (Contribution Margin 1)',
    definition: '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –ø—Ä—è–º—ã—Ö –∑–∞—Ç—Ä–∞—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞',
    formula: 'CM1 = –í—ã—Ä—É—á–∫–∞ - COGS - –ö–æ–º–∏—Å—Å–∏—è - –õ–æ–≥–∏—Å—Ç–∏–∫–∞',
    example: '1000‚ÇΩ - 500‚ÇΩ - 170‚ÇΩ - 50‚ÇΩ = 280‚ÇΩ',
    category: 'metrics'
  },
  {
    term: 'CM2 (Contribution Margin 2)',
    definition: '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤',
    formula: 'CM2 = CM1 - –†–µ–∫–ª–∞–º–∞',
    example: '280‚ÇΩ - 100‚ÇΩ = 180‚ÇΩ',
    category: 'metrics'
  },
  {
    term: 'ROI (Return on Investment)',
    definition: '–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–π',
    formula: 'ROI = (–ü—Ä–∏–±—ã–ª—å / –í–ª–æ–∂–µ–Ω–∏—è) √ó 100%',
    example: '–ü—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ 200‚ÇΩ –∏ –∑–∞—Ç—Ä–∞—Ç–∞—Ö 600‚ÇΩ: ROI = 33%',
    category: 'metrics'
  },
  {
    term: 'ACoS (Advertising Cost of Sales)',
    definition: '–î–æ–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ—Ç –≤—ã—Ä—É—á–∫–∏',
    formula: 'ACoS = (–†–µ–∫–ª–∞–º–∞ / –í—ã—Ä—É—á–∫–∞) √ó 100%',
    example: '–ü—Ä–∏ —Ä–µ–∫–ª–∞–º–µ 100‚ÇΩ –∏ –≤—ã—Ä—É—á–∫–µ 1000‚ÇΩ: ACoS = 10%',
    category: 'metrics'
  },
  {
    term: '–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏',
    definition: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤',
    formula: '–ë–£ —Ü–µ–Ω–∞ = –í—Å–µ –∑–∞—Ç—Ä–∞—Ç—ã / –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∫—É–ø',
    example: '–ü—Ä–∏ –∑–∞—Ç—Ä–∞—Ç–∞—Ö 700‚ÇΩ –∏ –≤—ã–∫—É–ø–µ 70%: –ë–£ = 1000‚ÇΩ',
    category: 'metrics'
  },
  
  // –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
  {
    term: '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞',
    definition: '–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫',
    example: '–¶–µ–Ω–∞ 1200‚ÇΩ –¥–æ —Å–∫–∏–¥–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ 10%',
    category: 'pricing'
  },
  {
    term: '–°–∫–∏–¥–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞',
    definition: '–°–∫–∏–¥–∫–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü –¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é',
    example: '–ü—Ä–∏ —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ü–µ–Ω–µ 1000‚ÇΩ –∏ —Å–∫–∏–¥–∫–µ 15% = 850‚ÇΩ',
    category: 'pricing'
  },
  {
    term: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ',
    definition: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –æ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (–°–ü–ü, –∞–∫—Ü–∏–∏)',
    example: '–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –°–ü–ü –Ω–∞ WB –∏–ª–∏ Flash Sale –Ω–∞ Ozon',
    category: 'pricing'
  },
  
  // –û–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
  {
    term: '–Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞',
    definition: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∑–∞—Ç—Ä–∞—Ç',
    example: '–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ —Å –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏',
    category: 'general'
  },
  {
    term: '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
    definition: '–î–æ–ª—è –ø—Ä–∏–±—ã–ª–∏ –≤ —Ü–µ–Ω–µ —Ç–æ–≤–∞—Ä–∞, –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö',
    formula: '–ú–∞—Ä–∂–∞ = (–ü—Ä–∏–±—ã–ª—å / –¶–µ–Ω–∞) √ó 100%',
    example: '–ü—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ 200‚ÇΩ –∏ —Ü–µ–Ω–µ 1000‚ÇΩ: –º–∞—Ä–∂–∞ = 20%',
    category: 'general'
  }
];

const CATEGORY_NAMES = {
  cogs: '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å',
  marketplace: '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å',
  metrics: '–ú–µ—Ç—Ä–∏–∫–∏',
  pricing: '–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
  general: '–û–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã'
};

interface GlossaryModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const GlossaryModal: React.FC<GlossaryModalProps> = ({ isOpen, onClose }) => {
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState('');

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
      document.body.style.overflow = 'hidden';
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, onClose]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤
  const filteredTerms = GLOSSARY_TERMS.filter(term => {
    const matchesCategory = selectedCategory === 'all' || term.category === selectedCategory;
    const matchesSearch = searchTerm === '' || 
      term.term.toLowerCase().includes(searchTerm.toLowerCase()) ||
      term.definition.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const groupedTerms = filteredTerms.reduce((acc, term) => {
    if (!acc[term.category]) {
      acc[term.category] = [];
    }
    acc[term.category].push(term);
    return acc;
  }, {} as Record<string, GlossaryTerm[]>);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50">
      <div className="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold">üìö –ì–ª–æ—Å—Å–∞—Ä–∏–π —Ç–µ—Ä–º–∏–Ω–æ–≤</h2>
              <p className="text-blue-100 mt-1">–†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–Ω—è—Ç–∏–π —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏</p>
            </div>
            <button
              onClick={onClose}
              className="text-white hover:text-gray-200 transition-colors p-2 rounded-lg hover:bg-white hover:bg-opacity-20"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex flex-col md:flex-row gap-4">
            {/* –ü–æ–∏—Å–∫ */}
            <div className="flex-1">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–º..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
            <div className="md:w-48">
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                {Object.entries(CATEGORY_NAMES).map(([key, name]) => (
                  <option key={key} value={key}>{name}</option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
        <div className="p-6 overflow-y-auto max-h-[60vh]">
          {Object.entries(groupedTerms).map(([category, terms]) => (
            <div key={category} className="mb-8 last:mb-0">
              <h3 className="text-lg font-bold text-gray-900 mb-4 flex items-center">
                <span className="w-2 h-2 bg-blue-600 rounded-full mr-3"></span>
                {CATEGORY_NAMES[category as keyof typeof CATEGORY_NAMES]}
              </h3>
              
              <div className="space-y-4">
                {terms.map((term, index) => (
                  <div key={index} className="bg-gray-50 rounded-lg p-4 border border-gray-200">
                    <h4 className="font-semibold text-gray-900 mb-2">{term.term}</h4>
                    <p className="text-gray-700 mb-3">{term.definition}</p>
                    
                    {term.formula && (
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-2">
                        <div className="text-sm font-medium text-blue-900 mb-1">–§–æ—Ä–º—É–ª–∞:</div>
                        <code className="text-sm text-blue-800 font-mono">{term.formula}</code>
                      </div>
                    )}
                    
                    {term.example && (
                      <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                        <div className="text-sm font-medium text-green-900 mb-1">–ü—Ä–∏–º–µ—Ä:</div>
                        <div className="text-sm text-green-800">{term.example}</div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))}

          {filteredTerms.length === 0 && (
            <div className="text-center py-12">
              <div className="text-gray-400 text-4xl mb-4">üîç</div>
              <p className="text-gray-600">–¢–µ—Ä–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              <p className="text-gray-500 text-sm mt-1">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</p>
            </div>
          )}
        </div>

        {/* –§—É—Ç–µ—Ä */}
        <div className="bg-gray-50 px-6 py-4 border-t border-gray-200">
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-600">
              –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: <span className="font-medium">{filteredTerms.length}</span>
            </div>
            <Button variant="primary" onClick={onClose}>
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GlossaryModal;
