# –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–æ–≤ - –§–∞–∑–∞ 5
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é —Ç–µ—Å—Ç–æ–≤

param(
    [switch]$Detailed,     # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    [switch]$CI,           # –†–µ–∂–∏–º CI/CD
    [switch]$Watch,        # –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    [string]$Threshold = "80"  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø–æ–∫—Ä—ã—Ç–∏—è
)

Write-Host "üß™ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–ö–†–´–¢–ò–Ø –¢–ï–°–¢–û–í - –§–ê–ó–ê 5" -ForegroundColor Cyan
Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
if (-not (Test-Path "node_modules")) {
    Write-Host "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã node_modules. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm install" -ForegroundColor Red
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
function Run-CoverageTests {
    Write-Host "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è..." -ForegroundColor Yellow
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å coverage
    $testResult = npm run test:coverage
    $exitCode = $LASTEXITCODE
    
    if ($exitCode -ne 0) {
        Write-Host "‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏" -ForegroundColor Red
        return $false
    }
    
    Write-Host "‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
    return $true
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ coverage —Ñ–∞–π–ª–æ–≤
function Analyze-Coverage {
    if (-not (Test-Path "coverage/coverage-final.json")) {
        Write-Host "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª coverage-final.json" -ForegroundColor Red
        return $null
    }
    
    $coverageData = Get-Content "coverage/coverage-final.json" | ConvertFrom-Json
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    $totalLines = 0
    $coveredLines = 0
    $totalFunctions = 0
    $coveredFunctions = 0
    $totalBranches = 0
    $coveredBranches = 0
    $totalStatements = 0
    $coveredStatements = 0
    
    foreach ($file in $coverageData.PSObject.Properties) {
        $fileData = $file.Value
        
        if ($fileData.l) {
            $totalLines += $fileData.l.total
            $coveredLines += $fileData.l.covered
        }
        
        if ($fileData.f) {
            $totalFunctions += $fileData.f.total
            $coveredFunctions += $fileData.f.covered
        }
        
        if ($fileData.b) {
            $totalBranches += $fileData.b.total
            $coveredBranches += $fileData.b.covered
        }
        
        if ($fileData.s) {
            $totalStatements += $fileData.s.total
            $coveredStatements += $fileData.s.covered
        }
    }
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    $linesCoverage = if ($totalLines -gt 0) { ($coveredLines / $totalLines) * 100 } else { 0 }
    $functionsCoverage = if ($totalFunctions -gt 0) { ($coveredFunctions / $totalFunctions) * 100 } else { 0 }
    $branchesCoverage = if ($totalBranches -gt 0) { ($coveredBranches / $totalBranches) * 100 } else { 0 }
    $statementsCoverage = if ($totalStatements -gt 0) { ($coveredStatements / $totalStatements) * 100 } else { 0 }
    
    return @{
        Lines = [math]::Round($linesCoverage, 2)
        Functions = [math]::Round($functionsCoverage, 2)
        Branches = [math]::Round($branchesCoverage, 2)
        Statements = [math]::Round($statementsCoverage, 2)
        TotalLines = $totalLines
        CoveredLines = $coveredLines
        TotalFunctions = $totalFunctions
        CoveredFunctions = $coveredFunctions
        TotalBranches = $totalBranches
        CoveredBranches = $coveredBranches
        TotalStatements = $totalStatements
        CoveredStatements = $coveredStatements
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
function Show-ProgressBar {
    param($Current, $Target, $Label)
    
    $progress = [math]::Min($Current / $Target, 1.0)
    $barLength = 30
    $filledLength = [math]::Round($progress * $barLength)
    $emptyLength = $barLength - $filledLength
    
    $bar = "‚ñà" * $filledLength + "‚ñë" * $emptyLength
    
    $color = if ($Current -ge $Target) { "Green" } 
             elseif ($Current -ge $Target * 0.8) { "Yellow" } 
             else { "Red" }
    
    Write-Host "$Label [$bar] " -NoNewline
    Write-Host "$Current%" -ForegroundColor $color -NoNewline
    Write-Host "/$Target%"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
function Show-Report {
    param($CoverageStats)
    
    $threshold = [int]$Threshold
    
    Write-Host ""
    Write-Host "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ö–†–´–¢–ò–Ø:" -ForegroundColor Cyan
    Write-Host "‚îÄ" * 40
    
    Show-ProgressBar -Current $CoverageStats.Lines -Target $threshold -Label "–°—Ç—Ä–æ–∫–∏    "
    Show-ProgressBar -Current $CoverageStats.Functions -Target $threshold -Label "–§—É–Ω–∫—Ü–∏–∏   "
    Show-ProgressBar -Current $CoverageStats.Branches -Target $threshold -Label "–í–µ—Ç–≤–ª–µ–Ω–∏—è "
    Show-ProgressBar -Current $CoverageStats.Statements -Target $threshold -Label "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã "
    
    Write-Host ""
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    $allMetTarget = $CoverageStats.Lines -ge $threshold -and 
                   $CoverageStats.Functions -ge $threshold -and 
                   $CoverageStats.Branches -ge $threshold -and 
                   $CoverageStats.Statements -ge $threshold
    
    if ($allMetTarget) {
        Write-Host "üéâ –í–°–ï –¶–ï–õ–ò –ü–û–ö–†–´–¢–ò–Ø –î–û–°–¢–ò–ì–ù–£–¢–´!" -ForegroundColor Green
        Write-Host "‚úÖ –§–∞–∑–∞ 5 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" -ForegroundColor Green
    } elseif ($CoverageStats.Lines -ge ($threshold * 0.9)) {
        Write-Host "‚ö†Ô∏è  –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏ - –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤" -ForegroundColor Yellow
    } else {
        Write-Host "üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏" -ForegroundColor Red
    }
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if ($Detailed) {
        Write-Host ""
        Write-Host "üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:" -ForegroundColor Cyan
        Write-Host "‚îÄ" * 40
        Write-Host "–ü–æ–∫—Ä—ã—Ç–æ —Å—Ç—Ä–æ–∫: $($CoverageStats.CoveredLines) –∏–∑ $($CoverageStats.TotalLines)"
        Write-Host "–ü–æ–∫—Ä—ã—Ç–æ —Ñ—É–Ω–∫—Ü–∏–π: $($CoverageStats.CoveredFunctions) –∏–∑ $($CoverageStats.TotalFunctions)"
        Write-Host "–ü–æ–∫—Ä—ã—Ç–æ –≤–µ—Ç–≤–ª–µ–Ω–∏–π: $($CoverageStats.CoveredBranches) –∏–∑ $($CoverageStats.TotalBranches)"
        Write-Host "–ü–æ–∫—Ä—ã—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: $($CoverageStats.CoveredStatements) –∏–∑ $($CoverageStats.TotalStatements)"
    }
    
    return $allMetTarget
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—Ä—ã—Ç–∏—è
function Save-CoverageHistory {
    param($CoverageStats)
    
    $historyPath = "coverage-history.json"
    $historyEntry = @{
        Timestamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
        Lines = $CoverageStats.Lines
        Functions = $CoverageStats.Functions
        Branches = $CoverageStats.Branches
        Statements = $CoverageStats.Statements
    }
    
    $history = @()
    if (Test-Path $historyPath) {
        $history = Get-Content $historyPath | ConvertFrom-Json
    }
    
    $history += $historyEntry
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
    if ($history.Count -gt 100) {
        $history = $history[-100..-1]
    }
    
    $history | ConvertTo-Json | Set-Content $historyPath
    Write-Host "üíæ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ $historyPath" -ForegroundColor Gray
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
try {
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    $testsSuccessful = Run-CoverageTests
    
    if (-not $testsSuccessful) {
        exit 1
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
    $coverageStats = Analyze-Coverage
    
    if (-not $coverageStats) {
        exit 1
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
    $targetsMet = Show-Report -CoverageStats $coverageStats
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    Save-CoverageHistory -CoverageStats $coverageStats
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è CI —Ä–µ–∂–∏–º–∞
    if ($CI) {
        if ($targetsMet) {
            Write-Host "CI: Coverage targets met ‚úÖ" -ForegroundColor Green
            exit 0
        } else {
            Write-Host "CI: Coverage below threshold ‚ùå" -ForegroundColor Red
            exit 1
        }
    }
    
    # –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    if ($Watch) {
        Write-Host ""
        Write-Host "üëÄ –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞." -ForegroundColor Blue
        
        while ($true) {
            Start-Sleep -Seconds 5
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ src —Ñ–∞–π–ª–∞—Ö
            $srcFiles = Get-ChildItem -Path "src" -Include "*.ts", "*.tsx" -Recurse
            $latestChange = ($srcFiles | Sort-Object LastWriteTime -Descending | Select-Object -First 1).LastWriteTime
            
            if ($latestChange -gt (Get-Date).AddSeconds(-10)) {
                Write-Host "üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞..." -ForegroundColor Yellow
                
                $testsSuccessful = Run-CoverageTests
                if ($testsSuccessful) {
                    $coverageStats = Analyze-Coverage
                    if ($coverageStats) {
                        Show-Report -CoverageStats $coverageStats
                        Save-CoverageHistory -CoverageStats $coverageStats
                    }
                }
            }
        }
    }
    
    Write-Host ""
    Write-Host "üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
